.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_load_from_neurochem.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_load_from_neurochem.py:


Construct Model From NeuroChem Files
====================================

This tutorial illustrates how to manually load model from `NeuroChem files`_.

.. _NeuroChem files:
    https://github.com/isayev/ASE_ANI/tree/master/ani_models

To begin with, let's first import the modules we will use:


.. code-block:: default

    import os
    import torch
    import torchani
    import ase









Now let's read constants from constant file and construct AEV computer.


.. code-block:: default

    try:
        path = os.path.dirname(os.path.realpath(__file__))
    except NameError:
        path = os.getcwd()
    const_file = os.path.join(path, '../torchani/resources/ani-1x_8x/rHCNO-5.2R_16-3.5A_a4-8.params')  # noqa: E501
    consts = torchani.neurochem.Constants(const_file)
    aev_computer = torchani.AEVComputer(**consts)








Now let's read self energies and construct energy shifter.


.. code-block:: default

    sae_file = os.path.join(path, '../torchani/resources/ani-1x_8x/sae_linfit.dat')  # noqa: E501
    energy_shifter = torchani.neurochem.load_sae(sae_file)








Now let's read a whole ensemble of models.


.. code-block:: default

    model_prefix = os.path.join(path, '../torchani/resources/ani-1x_8x/train')  # noqa: E501
    ensemble = torchani.neurochem.load_model_ensemble(consts.species, model_prefix, 8)  # noqa: E501








Or alternatively a single model.


.. code-block:: default

    model_dir = os.path.join(path, '../torchani/resources/ani-1x_8x/train0/networks')  # noqa: E501
    model = torchani.neurochem.load_model(consts.species, model_dir)








You can create the pipeline of computing energies:
(Coordinates) -[AEVComputer]-> (AEV) -[Neural Network]->
(Raw energies) -[EnergyShifter]-> (Final energies)
From using either the ensemble or a single model:


.. code-block:: default

    nnp1 = torchani.nn.Sequential(aev_computer, ensemble, energy_shifter)
    nnp2 = torchani.nn.Sequential(aev_computer, model, energy_shifter)
    print(nnp1)
    print(nnp2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sequential(
      (0): AEVComputer()
      (1): Ensemble(
        (0): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (1): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (2): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (3): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (4): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (5): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (6): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
        (7): ANIModel(
          (H): Sequential(
            (0): Linear(in_features=384, out_features=160, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=160, out_features=128, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=128, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (C): Sequential(
            (0): Linear(in_features=384, out_features=144, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=144, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (N): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
          (O): Sequential(
            (0): Linear(in_features=384, out_features=128, bias=True)
            (1): CELU(alpha=0.1)
            (2): Linear(in_features=128, out_features=112, bias=True)
            (3): CELU(alpha=0.1)
            (4): Linear(in_features=112, out_features=96, bias=True)
            (5): CELU(alpha=0.1)
            (6): Linear(in_features=96, out_features=1, bias=True)
          )
        )
      )
      (2): EnergyShifter()
    )
    Sequential(
      (0): AEVComputer()
      (1): ANIModel(
        (H): Sequential(
          (0): Linear(in_features=384, out_features=160, bias=True)
          (1): CELU(alpha=0.1)
          (2): Linear(in_features=160, out_features=128, bias=True)
          (3): CELU(alpha=0.1)
          (4): Linear(in_features=128, out_features=96, bias=True)
          (5): CELU(alpha=0.1)
          (6): Linear(in_features=96, out_features=1, bias=True)
        )
        (C): Sequential(
          (0): Linear(in_features=384, out_features=144, bias=True)
          (1): CELU(alpha=0.1)
          (2): Linear(in_features=144, out_features=112, bias=True)
          (3): CELU(alpha=0.1)
          (4): Linear(in_features=112, out_features=96, bias=True)
          (5): CELU(alpha=0.1)
          (6): Linear(in_features=96, out_features=1, bias=True)
        )
        (N): Sequential(
          (0): Linear(in_features=384, out_features=128, bias=True)
          (1): CELU(alpha=0.1)
          (2): Linear(in_features=128, out_features=112, bias=True)
          (3): CELU(alpha=0.1)
          (4): Linear(in_features=112, out_features=96, bias=True)
          (5): CELU(alpha=0.1)
          (6): Linear(in_features=96, out_features=1, bias=True)
        )
        (O): Sequential(
          (0): Linear(in_features=384, out_features=128, bias=True)
          (1): CELU(alpha=0.1)
          (2): Linear(in_features=128, out_features=112, bias=True)
          (3): CELU(alpha=0.1)
          (4): Linear(in_features=112, out_features=96, bias=True)
          (5): CELU(alpha=0.1)
          (6): Linear(in_features=96, out_features=1, bias=True)
        )
      )
      (2): EnergyShifter()
    )




You can also create an ASE calculator using the ensemble or single model:


.. code-block:: default

    calculator1 = torchani.ase.Calculator(consts.species, nnp1)
    calculator2 = torchani.ase.Calculator(consts.species, nnp2)
    print(calculator1)
    print(calculator1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <torchani.ase.Calculator object at 0x7fe9adee16d0>
    <torchani.ase.Calculator object at 0x7fe9adee16d0>




Now let's define a methane molecule


.. code-block:: default

    coordinates = torch.tensor([[[0.03192167, 0.00638559, 0.01301679],
                                 [-0.83140486, 0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308, 0.20759389],
                                 [0.45554739, 0.54289633, 0.81170881],
                                 [0.66091919, -0.16799635, -0.91037834]]],
                               requires_grad=True)
    species = consts.species_to_tensor('CHHHH').unsqueeze(0)
    methane = ase.Atoms('CHHHH', positions=coordinates.squeeze().detach().numpy())








Now let's compute energies using the ensemble directly:


.. code-block:: default

    energy = nnp1((species, coordinates)).energies
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative
    print('Energy:', energy.item())
    print('Force:', force.squeeze())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.459022105724976
    Force: tensor([[ 0.031, -0.132, -0.053],
            [-0.129,  0.164, -0.077],
            [ 0.086, -0.043,  0.041],
            [ 0.027,  0.006,  0.038],
            [-0.014,  0.005,  0.051]])




And using the ASE interface of the ensemble:


.. code-block:: default

    methane.set_calculator(calculator1)
    print('Energy:', methane.get_potential_energy() / ase.units.Hartree)
    print('Force:', methane.get_forces() / ase.units.Hartree)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.45902210572497
    Force: [[ 0.03062525 -0.1316046  -0.05265211]
     [-0.12927504  0.16388635 -0.07736802]
     [ 0.08563146 -0.04288924  0.04082094]
     [ 0.02681219  0.00601403  0.03809872]
     [-0.01379386  0.00459347  0.05110046]]




We can do the same thing with the single model:


.. code-block:: default

    energy = nnp2((species, coordinates)).energies
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative
    print('Energy:', energy.item())
    print('Force:', force.squeeze())

    methane.set_calculator(calculator2)
    print('Energy:', methane.get_potential_energy() / ase.units.Hartree)
    print('Force:', methane.get_forces() / ase.units.Hartree)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.462800356612966
    Force: tensor([[ 0.056, -0.127, -0.054],
            [-0.140,  0.155, -0.075],
            [ 0.075, -0.037,  0.039],
            [ 0.024,  0.002,  0.033],
            [-0.016,  0.007,  0.057]])
    Energy: -40.462800356612966
    Force: [[ 0.05614969 -0.12697157 -0.05413403]
     [-0.14007527  0.15523374 -0.07533836]
     [ 0.07532089 -0.03744112  0.0394967 ]
     [ 0.02423096  0.00235086  0.03344225]
     [-0.01562628  0.0068281   0.05653343]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.850 seconds)


.. _sphx_glr_download_examples_load_from_neurochem.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: load_from_neurochem.py <load_from_neurochem.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: load_from_neurochem.ipynb <load_from_neurochem.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
