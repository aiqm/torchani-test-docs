.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_load_from_neurochem.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_load_from_neurochem.py:


Construct Model From NeuroChem Files
====================================

This tutorial illustrates how to manually load model from `NeuroChem files`_.

.. _NeuroChem files:
    https://github.com/isayev/ASE_ANI/tree/master/ani_models

To begin with, let's first import the modules we will use:


.. code-block:: default

    import os
    import torch
    import torchani
    import ase








Now let's read constants from constant file and construct AEV computer.


.. code-block:: default

    try:
        path = os.path.dirname(os.path.realpath(__file__))
    except NameError:
        path = os.getcwd()
    const_file = os.path.join(path, '../torchani/resources/ani-1x_8x/rHCNO-5.2R_16-3.5A_a4-8.params')  # noqa: E501
    consts = torchani.neurochem.Constants(const_file)
    aev_computer = torchani.AEVComputer(**consts)







Now let's read self energies and construct energy shifter.


.. code-block:: default

    sae_file = os.path.join(path, '../torchani/resources/ani-1x_8x/sae_linfit.dat')  # noqa: E501
    energy_shifter = torchani.neurochem.load_sae(sae_file)







Now let's read a whole ensemble of models.


.. code-block:: default

    model_prefix = os.path.join(path, '../torchani/resources/ani-1x_8x/train')  # noqa: E501
    ensemble = torchani.neurochem.load_model_ensemble(consts.species, model_prefix, 8)  # noqa: E501







Or alternatively a single model.


.. code-block:: default

    model_dir = os.path.join(path, '../torchani/resources/ani-1x_8x/train0/networks')  # noqa: E501
    model = torchani.neurochem.load_model(consts.species, model_dir)







You can create the pipeline of computing energies:
(Coordinates) -[AEVComputer]-> (AEV) -[Neural Network]->
(Raw energies) -[EnergyShifter]-> (Final energies)
From using either the ensemble or a single model:


.. code-block:: default

    nnp1 = torchani.nn.Sequential(aev_computer, ensemble, energy_shifter)
    nnp2 = torchani.nn.Sequential(aev_computer, model, energy_shifter)
    print(nnp1)
    print(nnp2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Sequential(
      (modules_list): ModuleList(
        (0): AEVComputer()
        (1): Ensemble(
          (model0): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model1): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model2): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model3): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model4): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model5): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model6): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
          (model7): ANIModel(
            (module_list): ModuleList(
              (0): Sequential(
                (0): Linear(in_features=384, out_features=160, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=160, out_features=128, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=128, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (1): Sequential(
                (0): Linear(in_features=384, out_features=144, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=144, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (2): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
              (3): Sequential(
                (0): Linear(in_features=384, out_features=128, bias=True)
                (1): CELU(alpha=0.1)
                (2): Linear(in_features=128, out_features=112, bias=True)
                (3): CELU(alpha=0.1)
                (4): Linear(in_features=112, out_features=96, bias=True)
                (5): CELU(alpha=0.1)
                (6): Linear(in_features=96, out_features=1, bias=True)
              )
            )
          )
        )
        (2): EnergyShifter()
      )
    )
    Sequential(
      (modules_list): ModuleList(
        (0): AEVComputer()
        (1): ANIModel(
          (module_list): ModuleList(
            (0): Sequential(
              (0): Linear(in_features=384, out_features=160, bias=True)
              (1): CELU(alpha=0.1)
              (2): Linear(in_features=160, out_features=128, bias=True)
              (3): CELU(alpha=0.1)
              (4): Linear(in_features=128, out_features=96, bias=True)
              (5): CELU(alpha=0.1)
              (6): Linear(in_features=96, out_features=1, bias=True)
            )
            (1): Sequential(
              (0): Linear(in_features=384, out_features=144, bias=True)
              (1): CELU(alpha=0.1)
              (2): Linear(in_features=144, out_features=112, bias=True)
              (3): CELU(alpha=0.1)
              (4): Linear(in_features=112, out_features=96, bias=True)
              (5): CELU(alpha=0.1)
              (6): Linear(in_features=96, out_features=1, bias=True)
            )
            (2): Sequential(
              (0): Linear(in_features=384, out_features=128, bias=True)
              (1): CELU(alpha=0.1)
              (2): Linear(in_features=128, out_features=112, bias=True)
              (3): CELU(alpha=0.1)
              (4): Linear(in_features=112, out_features=96, bias=True)
              (5): CELU(alpha=0.1)
              (6): Linear(in_features=96, out_features=1, bias=True)
            )
            (3): Sequential(
              (0): Linear(in_features=384, out_features=128, bias=True)
              (1): CELU(alpha=0.1)
              (2): Linear(in_features=128, out_features=112, bias=True)
              (3): CELU(alpha=0.1)
              (4): Linear(in_features=112, out_features=96, bias=True)
              (5): CELU(alpha=0.1)
              (6): Linear(in_features=96, out_features=1, bias=True)
            )
          )
        )
        (2): EnergyShifter()
      )
    )



You can also create an ASE calculator using the ensemble or single model:


.. code-block:: default

    calculator1 = torchani.ase.Calculator(consts.species, aev_computer,
                                          ensemble, energy_shifter)
    calculator2 = torchani.ase.Calculator(consts.species, aev_computer,
                                          model, energy_shifter)
    print(calculator1)
    print(calculator1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <torchani.ase.Calculator object at 0x7f91f408d910>
    <torchani.ase.Calculator object at 0x7f91f408d910>



Now let's define a methane molecule


.. code-block:: default

    coordinates = torch.tensor([[[0.03192167, 0.00638559, 0.01301679],
                                 [-0.83140486, 0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308, 0.20759389],
                                 [0.45554739, 0.54289633, 0.81170881],
                                 [0.66091919, -0.16799635, -0.91037834]]],
                               requires_grad=True)
    species = consts.species_to_tensor('CHHHH').unsqueeze(0)
    methane = ase.Atoms('CHHHH', positions=coordinates.squeeze().detach().numpy())







Now let's compute energies using the ensemble directly:


.. code-block:: default

    _, energy = nnp1((species, coordinates))
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative
    print('Energy:', energy.item())
    print('Force:', force.squeeze())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.459022101999686
    Force: tensor([[ 0.0306, -0.1316, -0.0527],
            [-0.1293,  0.1639, -0.0774],
            [ 0.0856, -0.0429,  0.0408],
            [ 0.0268,  0.0060,  0.0381],
            [-0.0138,  0.0046,  0.0511]])



And using the ASE interface of the ensemble:


.. code-block:: default

    methane.set_calculator(calculator1)
    print('Energy:', methane.get_potential_energy() / ase.units.Hartree)
    print('Force:', methane.get_forces() / ase.units.Hartree)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.45902211136144
    Force: [[ 0.03062537 -0.13160468 -0.05265202]
     [-0.12927519  0.1638864  -0.07736807]
     [ 0.08563146 -0.04288921  0.04082094]
     [ 0.02681218  0.00601403  0.03809874]
     [-0.01379382  0.00459346  0.05110041]]



We can do the same thing with the single model:


.. code-block:: default

    _, energy = nnp2((species, coordinates))
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative
    print('Energy:', energy.item())
    print('Force:', force.squeeze())

    methane.set_calculator(calculator2)
    print('Energy:', methane.get_potential_energy() / ase.units.Hartree)
    print('Force:', methane.get_forces() / ase.units.Hartree)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.46280037710206
    Force: tensor([[ 0.0561, -0.1270, -0.0541],
            [-0.1401,  0.1552, -0.0753],
            [ 0.0753, -0.0374,  0.0395],
            [ 0.0242,  0.0024,  0.0334],
            [-0.0156,  0.0068,  0.0565]])
    Energy: -40.462800369272465
    Force: [[ 0.05614975 -0.12697164 -0.05413397]
     [-0.14007539  0.15523373 -0.07533837]
     [ 0.0753209  -0.03744103  0.03949668]
     [ 0.02423099  0.00235086  0.03344229]
     [-0.01562624  0.00682808  0.05653338]]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.044 seconds)


.. _sphx_glr_download_examples_load_from_neurochem.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: load_from_neurochem.py <load_from_neurochem.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: load_from_neurochem.ipynb <load_from_neurochem.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
