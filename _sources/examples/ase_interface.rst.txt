.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_ase_interface.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ase_interface.py:


Structure minimization and constant temperature MD using ASE interface
======================================================================

This example is modified from the official `home page` and
`Constant temperature MD`_ to use the ASE interface of TorchANI as energy
calculator.

.. _home page:
    https://wiki.fysik.dtu.dk/ase/
.. _Constant temperature MD:
    https://wiki.fysik.dtu.dk/ase/tutorials/md/md.html#constant-temperature-md

To begin with, let's first import the modules we will use:


.. code-block:: default

    from __future__ import print_function
    from ase.lattice.cubic import Diamond
    from ase.md.langevin import Langevin
    from ase.optimize import BFGS
    from ase import units
    import torchani








Now let's set up a crystal


.. code-block:: default

    atoms = Diamond(symbol="C", pbc=True)
    print(len(atoms), "atoms in the cell")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    8 atoms in the cell



Now let's create a calculator from builtin models:


.. code-block:: default

    calculator = torchani.models.ANI1ccx().ase()







.. note::
    Regardless of the dtype you use in your model, when converting it to ASE
    calculator, it always automatically the dtype to ``torch.float64``. The
    reason for this behavior is, at many cases, the rounding error is too
    large for structure minimization. If you insist on using
    ``torch.float32``, do the following instead:

    .. code-block:: python

        calculator = torchani.models.ANI1ccx().ase(dtype=torch.float32)

Now let's set the calculator for ``atoms``:


.. code-block:: default

    atoms.set_calculator(calculator)







Now let's minimize the structure:


.. code-block:: default

    print("Begin minimizing...")
    opt = BFGS(atoms)
    opt.run(fmax=0.001)
    print()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Begin minimizing...
          Step     Time          Energy         fmax
    BFGS:    0 10:51:23    -8311.226179        0.0000




Now create a callback function that print interesting physical quantities:


.. code-block:: default

    def printenergy(a=atoms):
        """Function to print the potential, kinetic and total energy."""
        epot = a.get_potential_energy() / len(a)
        ekin = a.get_kinetic_energy() / len(a)
        print('Energy per atom: Epot = %.3feV  Ekin = %.3feV (T=%3.0fK)  '
              'Etot = %.3feV' % (epot, ekin, ekin / (1.5 * units.kB), epot + ekin))








We want to run MD with constant energy using the Langevin algorithm
with a time step of 1 fs, the temperature 300K and the friction
coefficient to 0.02 atomic units.


.. code-block:: default

    dyn = Langevin(atoms, 1 * units.fs, 300 * units.kB, 0.2)
    dyn.attach(printenergy, interval=50)







Now run the dynamics:


.. code-block:: default

    print("Beginning dynamics...")
    printenergy()
    dyn.run(500)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Beginning dynamics...
    Energy per atom: Epot = -1038.903eV  Ekin = 0.000eV (T=  0K)  Etot = -1038.903eV
    Energy per atom: Epot = -1038.903eV  Ekin = 0.000eV (T=  0K)  Etot = -1038.903eV
    Energy per atom: Epot = -1038.877eV  Ekin = 0.013eV (T=101K)  Etot = -1038.864eV
    Energy per atom: Epot = -1038.877eV  Ekin = 0.036eV (T=279K)  Etot = -1038.841eV
    Energy per atom: Epot = -1038.874eV  Ekin = 0.046eV (T=358K)  Etot = -1038.828eV
    Energy per atom: Epot = -1038.866eV  Ekin = 0.044eV (T=337K)  Etot = -1038.823eV
    Energy per atom: Epot = -1038.874eV  Ekin = 0.034eV (T=264K)  Etot = -1038.840eV
    Energy per atom: Epot = -1038.864eV  Ekin = 0.041eV (T=317K)  Etot = -1038.824eV
    Energy per atom: Epot = -1038.848eV  Ekin = 0.034eV (T=265K)  Etot = -1038.814eV
    Energy per atom: Epot = -1038.892eV  Ekin = 0.045eV (T=347K)  Etot = -1038.847eV
    Energy per atom: Epot = -1038.887eV  Ekin = 0.045eV (T=348K)  Etot = -1038.842eV
    Energy per atom: Epot = -1038.876eV  Ekin = 0.035eV (T=270K)  Etot = -1038.841eV




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  40.059 seconds)


.. _sphx_glr_download_examples_ase_interface.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: ase_interface.py <ase_interface.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: ase_interface.ipynb <ase_interface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
