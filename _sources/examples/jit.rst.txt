.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_jit.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_jit.py:


Using TorchScript to serialize and deploy model
===============================================

Models in TorchANI's model zoo support TorchScript. TorchScript is a way to create
serializable and optimizable models from PyTorch code. It allows users to saved their
models from a Python process and loaded in a process where there is no Python dependency.

To begin with, let's first import the modules we will use:


.. code-block:: default

    import torch
    import torchani







Let's now load the built-in ANI-1ccx models. The builtin ANI-1ccx contains 8
models trained with diffrent initialization.


.. code-block:: default

    model = torchani.models.ANI1ccx()







It is very easy to compile and save the model using `torch.jit`.


.. code-block:: default

    compiled_model = torch.jit.script(model)
    torch.jit.save(compiled_model, 'compiled_model.pt')







Besides compiling the ensemble, it is also possible to compile a single network


.. code-block:: default

    compiled_model0 = torch.jit.script(model[0])
    torch.jit.save(compiled_model0, 'compiled_model0.pt')







For testing purposes, we will now load the models we just saved and see if they
produces the same output as the original model:


.. code-block:: default

    loaded_compiled_model = torch.jit.load('compiled_model.pt')
    loaded_compiled_model0 = torch.jit.load('compiled_model0.pt')








We use the molecule below to test:


.. code-block:: default

    coordinates = torch.tensor([[[0.03192167, 0.00638559, 0.01301679],
                                 [-0.83140486, 0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308, 0.20759389],
                                 [0.45554739, 0.54289633, 0.81170881],
                                 [0.66091919, -0.16799635, -0.91037834]]])
    species = model.species_to_tensor('CHHHH').unsqueeze(0)







And here is the result:


.. code-block:: default

    energies_ensemble = model((species, coordinates)).energies
    energies_single = model[0]((species, coordinates)).energies
    energies_ensemble_jit = loaded_compiled_model((species, coordinates)).energies
    energies_single_jit = loaded_compiled_model0((species, coordinates)).energies
    print('Ensemble energy, eager mode vs loaded jit:', energies_ensemble.item(), energies_ensemble_jit.item())
    print('Single network energy, eager mode vs loaded jit:', energies_single.item(), energies_single_jit.item())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Ensemble energy, eager mode vs loaded jit: -40.425620573407016 -40.425620573407016
    Single network energy, eager mode vs loaded jit: -40.42878345662912 -40.42878345662912




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.934 seconds)


.. _sphx_glr_download_examples_jit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: jit.py <jit.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: jit.ipynb <jit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
