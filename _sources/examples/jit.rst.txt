.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_jit.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_jit.py:


Using TorchScript to serialize and deploy model
===============================================

Models in TorchANI's model zoo support TorchScript. TorchScript is a way to create
serializable and optimizable models from PyTorch code. It allows users to saved their
models from a Python process and loaded in a process where there is no Python dependency.

To begin with, let's first import the modules we will use:


.. code-block:: default

    import torch
    import torchani
    from typing import Tuple, Optional
    from torch import Tensor








Scripting builtin model directly
--------------------------------

Let's now load the built-in ANI-1ccx models. The builtin ANI-1ccx contains 8
models trained with diffrent initialization.


.. code-block:: default

    model = torchani.models.ANI1ccx(periodic_table_index=True)








It is very easy to compile and save the model using `torch.jit`.


.. code-block:: default

    compiled_model = torch.jit.script(model)
    torch.jit.save(compiled_model, 'compiled_model.pt')








Besides compiling the ensemble, it is also possible to compile a single network


.. code-block:: default

    compiled_model0 = torch.jit.script(model[0])
    torch.jit.save(compiled_model0, 'compiled_model0.pt')








For testing purposes, we will now load the models we just saved and see if they
produces the same output as the original model:


.. code-block:: default

    loaded_compiled_model = torch.jit.load('compiled_model.pt')
    loaded_compiled_model0 = torch.jit.load('compiled_model0.pt')









We use the molecule below to test:


.. code-block:: default

    coordinates = torch.tensor([[[0.03192167, 0.00638559, 0.01301679],
                                 [-0.83140486, 0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308, 0.20759389],
                                 [0.45554739, 0.54289633, 0.81170881],
                                 [0.66091919, -0.16799635, -0.91037834]]])
    # In periodic table, C = 6 and H = 1
    species = torch.tensor([[6, 1, 1, 1, 1]])








And here is the result:


.. code-block:: default

    energies_ensemble = model((species, coordinates)).energies
    energies_single = model[0]((species, coordinates)).energies
    energies_ensemble_jit = loaded_compiled_model((species, coordinates)).energies
    energies_single_jit = loaded_compiled_model0((species, coordinates)).energies
    print('Ensemble energy, eager mode vs loaded jit:', energies_ensemble.item(), energies_ensemble_jit.item())
    print('Single network energy, eager mode vs loaded jit:', energies_single.item(), energies_single_jit.item())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Ensemble energy, eager mode vs loaded jit: -40.425620579926274 -40.425620579926274
    Single network energy, eager mode vs loaded jit: -40.428783462217055 -40.428783462217055




Customize the model and script
------------------------------

You could also customize the model you want to export. For example, let's do
the following customization to the model:

- uses double as dtype instead of float
- don't care about periodic boundary condition
- in addition to energies, allow returning optionally forces
- when indexing atom species, use its index in the periodic table instead of 0, 1, 2, 3, ...

you could do the following:


.. code-block:: default

    class CustomModule(torch.nn.Module):

        def __init__(self):
            super().__init__()
            self.model = torchani.models.ANI1x(periodic_table_index=True).double()
            # self.model = torchani.models.ANI1x(periodic_table_index=True)[0].double()
            # self.model = torchani.models.ANI1ccx(periodic_table_index=True).double()

        def forward(self, species: Tensor, coordinates: Tensor, return_forces: bool = False) -> Tuple[Tensor, Optional[Tensor]]:
            if return_forces:
                coordinates.requires_grad_(True)

            energies = self.model((species, coordinates)).energies

            forces: Optional[Tensor] = None  # noqa: E701
            if return_forces:
                grad = torch.autograd.grad([energies.sum()], [coordinates])[0]
                assert grad is not None
                forces = -grad
            return energies, forces


    custom_model = CustomModule()
    compiled_custom_model = torch.jit.script(custom_model)
    torch.jit.save(compiled_custom_model, 'compiled_custom_model.pt')
    loaded_compiled_custom_model = torch.jit.load('compiled_custom_model.pt')
    energies, forces = custom_model(species, coordinates, True)
    energies_jit, forces_jit = loaded_compiled_custom_model(species, coordinates, True)

    print('Energy, eager mode vs loaded jit:', energies.item(), energies_jit.item())
    print()
    print('Force, eager mode vs loaded jit:\n', forces.squeeze(0), '\n', forces_jit.squeeze(0))
    print()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy, eager mode vs loaded jit: -40.4590220910793 -40.4590220910793

    Force, eager mode vs loaded jit:
     tensor([[ 0.031, -0.132, -0.053],
            [-0.129,  0.164, -0.077],
            [ 0.086, -0.043,  0.041],
            [ 0.027,  0.006,  0.038],
            [-0.014,  0.005,  0.051]]) 
     tensor([[ 0.031, -0.132, -0.053],
            [-0.129,  0.164, -0.077],
            [ 0.086, -0.043,  0.041],
            [ 0.027,  0.006,  0.038],
            [-0.014,  0.005,  0.051]])






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.352 seconds)


.. _sphx_glr_download_examples_jit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: jit.py <jit.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: jit.ipynb <jit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
