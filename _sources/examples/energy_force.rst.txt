.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_energy_force.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_energy_force.py:


Computing Energy and Force Using Models Inside Model Zoo
========================================================

TorchANI has a model zoo trained by NeuroChem. These models are shipped with
TorchANI and can be used directly.

To begin with, let's first import the modules we will use:


.. code-block:: default

    from __future__ import print_function
    import torch
    import torchani







Let's now manually specify the device we want TorchANI to run:


.. code-block:: default

    device = torch.device('cpu')







Let's now load the built-in ANI-1ccx models. The builtin ANI-1ccx contains 8
models trained with diffrent initialization. Predicting the energy and force
using the average of the 8 models outperform using a single model, so it is
always recommended to use an ensemble, unless the speed of computation is an
issue in your application.


.. code-block:: default

    model = torchani.models.ANI1ccx()







Now let's define the coordinate and species. If you just want to compute the
energy and force for a single structure like in this example, you need to
make the coordinate tensor has shape ``(1, Na, 3)`` and species has shape
``(1, Na)``, where ``Na`` is the number of atoms in the molecule, the
preceding ``1`` in the shape is here to support batch processing like in
training. If you have ``N`` different structures to compute, then make it
``N``.


.. code-block:: default

    coordinates = torch.tensor([[[0.03192167, 0.00638559, 0.01301679],
                                 [-0.83140486, 0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308, 0.20759389],
                                 [0.45554739, 0.54289633, 0.81170881],
                                 [0.66091919, -0.16799635, -0.91037834]]],
                               requires_grad=True, device=device)
    species = model.species_to_tensor('CHHHH').to(device).unsqueeze(0)







Now let's compute energy and force:


.. code-block:: default

    _, energy = model((species, coordinates))
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative







And print to see the result:


.. code-block:: default

    print('Energy:', energy.item())
    print('Force:', force.squeeze())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.425620573407016
    Force: tensor([[ 0.0312, -0.1272, -0.0511],
            [-0.1200,  0.1628, -0.0761],
            [ 0.0856, -0.0448,  0.0407],
            [ 0.0219,  0.0044,  0.0343],
            [-0.0187,  0.0049,  0.0521]])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.929 seconds)


.. _sphx_glr_download_examples_energy_force.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: energy_force.py <energy_force.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: energy_force.ipynb <energy_force.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
